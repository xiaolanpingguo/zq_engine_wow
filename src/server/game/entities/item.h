#pragma once


#include "entity.h"
#include "object_guid.h"
#include "entities_key_def.hpp"


namespace zq{


#define MAX_GEM_SOCKETS               MAX_ITEM_PROTO_SOCKETS// (BONUS_ENCHANTMENT_SLOT-SOCK_ENCHANTMENT_SLOT) and item proto size, equal value expected

enum EnchantmentOffset
{
    ENCHANTMENT_ID_OFFSET       = 0,
    ENCHANTMENT_DURATION_OFFSET = 1,
    ENCHANTMENT_CHARGES_OFFSET  = 2,                         // now here not only charges, but something new in wotlk
	MAX_ENCHANTMENT_OFFSET
};


enum ItemUpdateState
{
    ITEM_UNCHANGED                               = 0,
    ITEM_CHANGED                                 = 1,
    ITEM_NEW                                     = 2,
    ITEM_REMOVED                                 = 3
};

enum InventoryType : uint8
{
	INVTYPE_NON_EQUIP = 0,
	INVTYPE_HEAD = 1,
	INVTYPE_NECK = 2,
	INVTYPE_SHOULDERS = 3,
	INVTYPE_BODY = 4,
	INVTYPE_CHEST = 5,
	INVTYPE_WAIST = 6,
	INVTYPE_LEGS = 7,
	INVTYPE_FEET = 8,
	INVTYPE_WRISTS = 9,
	INVTYPE_HANDS = 10,
	INVTYPE_FINGER = 11,
	INVTYPE_TRINKET = 12,
	INVTYPE_WEAPON = 13,
	INVTYPE_SHIELD = 14,
	INVTYPE_RANGED = 15,
	INVTYPE_CLOAK = 16,
	INVTYPE_2HWEAPON = 17,
	INVTYPE_BAG = 18,
	INVTYPE_TABARD = 19,
	INVTYPE_ROBE = 20,
	INVTYPE_WEAPONMAINHAND = 21,
	INVTYPE_WEAPONOFFHAND = 22,
	INVTYPE_HOLDABLE = 23,
	INVTYPE_AMMO = 24,
	INVTYPE_THROWN = 25,
	INVTYPE_RANGEDRIGHT = 26,
	INVTYPE_QUIVER = 27,
	INVTYPE_RELIC = 28,
	MAX_INVTYPE
};

enum InventorySlot
{
	NULL_BAG = 0,
	NULL_SLOT = 255
};



enum InventoryResult : uint8
{
	EQUIP_ERR_OK = 0,
	EQUIP_ERR_CANT_EQUIP_LEVEL_I = 1,
	EQUIP_ERR_CANT_EQUIP_SKILL = 2,
	EQUIP_ERR_ITEM_DOESNT_GO_TO_SLOT = 3,
	EQUIP_ERR_BAG_FULL = 4,
	EQUIP_ERR_NONEMPTY_BAG_OVER_OTHER_BAG = 5,
	EQUIP_ERR_CANT_TRADE_EQUIP_BAGS = 6,
	EQUIP_ERR_ONLY_AMMO_CAN_GO_HERE = 7,
	EQUIP_ERR_NO_REQUIRED_PROFICIENCY = 8,
	EQUIP_ERR_NO_EQUIPMENT_SLOT_AVAILABLE = 9,
	EQUIP_ERR_YOU_CAN_NEVER_USE_THAT_ITEM = 10,
	EQUIP_ERR_YOU_CAN_NEVER_USE_THAT_ITEM2 = 11,
	EQUIP_ERR_NO_EQUIPMENT_SLOT_AVAILABLE2 = 12,
	EQUIP_ERR_CANT_EQUIP_WITH_TWOHANDED = 13,
	EQUIP_ERR_CANT_DUAL_WIELD = 14,
	EQUIP_ERR_ITEM_DOESNT_GO_INTO_BAG = 15,
	EQUIP_ERR_ITEM_DOESNT_GO_INTO_BAG2 = 16,
	EQUIP_ERR_CANT_CARRY_MORE_OF_THIS = 17,
	EQUIP_ERR_NO_EQUIPMENT_SLOT_AVAILABLE3 = 18,
	EQUIP_ERR_ITEM_CANT_STACK = 19,
	EQUIP_ERR_ITEM_CANT_BE_EQUIPPED = 20,
	EQUIP_ERR_ITEMS_CANT_BE_SWAPPED = 21,
	EQUIP_ERR_SLOT_IS_EMPTY = 22,
	EQUIP_ERR_ITEM_NOT_FOUND = 23,
	EQUIP_ERR_CANT_DROP_SOULBOUND = 24,
	EQUIP_ERR_OUT_OF_RANGE = 25,
	EQUIP_ERR_TRIED_TO_SPLIT_MORE_THAN_COUNT = 26,
	EQUIP_ERR_COULDNT_SPLIT_ITEMS = 27,
	EQUIP_ERR_MISSING_REAGENT = 28,
	EQUIP_ERR_NOT_ENOUGH_MONEY = 29,
	EQUIP_ERR_NOT_A_BAG = 30,
	EQUIP_ERR_CAN_ONLY_DO_WITH_EMPTY_BAGS = 31,
	EQUIP_ERR_DONT_OWN_THAT_ITEM = 32,
	EQUIP_ERR_CAN_EQUIP_ONLY1_QUIVER = 33,
	EQUIP_ERR_MUST_PURCHASE_THAT_BAG_SLOT = 34,
	EQUIP_ERR_TOO_FAR_AWAY_FROM_BANK = 35,
	EQUIP_ERR_ITEM_LOCKED = 36,
	EQUIP_ERR_YOU_ARE_STUNNED = 37,
	EQUIP_ERR_YOU_ARE_DEAD = 38,
	EQUIP_ERR_CANT_DO_RIGHT_NOW = 39,
	EQUIP_ERR_INT_BAG_ERROR = 40,
	EQUIP_ERR_CAN_EQUIP_ONLY1_BOLT = 41,
	EQUIP_ERR_CAN_EQUIP_ONLY1_AMMOPOUCH = 42,
	EQUIP_ERR_STACKABLE_CANT_BE_WRAPPED = 43,
	EQUIP_ERR_EQUIPPED_CANT_BE_WRAPPED = 44,
	EQUIP_ERR_WRAPPED_CANT_BE_WRAPPED = 45,
	EQUIP_ERR_BOUND_CANT_BE_WRAPPED = 46,
	EQUIP_ERR_UNIQUE_CANT_BE_WRAPPED = 47,
	EQUIP_ERR_BAGS_CANT_BE_WRAPPED = 48,
	EQUIP_ERR_ALREADY_LOOTED = 49,
	EQUIP_ERR_INVENTORY_FULL = 50,
	EQUIP_ERR_BANK_FULL = 51,
	EQUIP_ERR_ITEM_IS_CURRENTLY_SOLD_OUT = 52,
	EQUIP_ERR_BAG_FULL3 = 53,
	EQUIP_ERR_ITEM_NOT_FOUND2 = 54,
	EQUIP_ERR_ITEM_CANT_STACK2 = 55,
	EQUIP_ERR_BAG_FULL4 = 56,
	EQUIP_ERR_ITEM_SOLD_OUT = 57,
	EQUIP_ERR_OBJECT_IS_BUSY = 58,
	EQUIP_ERR_NONE = 59,
	EQUIP_ERR_NOT_IN_COMBAT = 60,
	EQUIP_ERR_NOT_WHILE_DISARMED = 61,
	EQUIP_ERR_BAG_FULL6 = 62,
	EQUIP_ERR_CANT_EQUIP_RANK = 63,
	EQUIP_ERR_CANT_EQUIP_REPUTATION = 64,
	EQUIP_ERR_TOO_MANY_SPECIAL_BAGS = 65,
	EQUIP_ERR_LOOT_CANT_LOOT_THAT_NOW = 66,
	EQUIP_ERR_ITEM_UNIQUE_EQUIPABLE = 67,
	EQUIP_ERR_VENDOR_MISSING_TURNINS = 68,
	EQUIP_ERR_NOT_ENOUGH_HONOR_POINTS = 69,
	EQUIP_ERR_NOT_ENOUGH_ARENA_POINTS = 70,
	EQUIP_ERR_ITEM_MAX_COUNT_SOCKETED = 71,
	EQUIP_ERR_MAIL_BOUND_ITEM = 72,
	EQUIP_ERR_NO_SPLIT_WHILE_PROSPECTING = 73,
	EQUIP_ERR_ITEM_MAX_COUNT_EQUIPPED_SOCKETED = 75,
	EQUIP_ERR_ITEM_UNIQUE_EQUIPPABLE_SOCKETED = 76,
	EQUIP_ERR_TOO_MUCH_GOLD = 77,
	EQUIP_ERR_NOT_DURING_ARENA_MATCH = 78,
	EQUIP_ERR_CANNOT_TRADE_THAT = 79,
	EQUIP_ERR_PERSONAL_ARENA_RATING_TOO_LOW = 80,
	EQUIP_ERR_EVENT_AUTOEQUIP_BIND_CONFIRM = 81,
	EQUIP_ERR_ARTEFACTS_ONLY_FOR_OWN_CHARACTERS = 82,
	// no output                                 = 83,
	EQUIP_ERR_ITEM_MAX_LIMIT_CATEGORY_COUNT_EXCEEDED = 84,
	EQUIP_ERR_ITEM_MAX_LIMIT_CATEGORY_SOCKETED_EXCEEDED = 85,
	EQUIP_ERR_SCALING_STAT_ITEM_LEVEL_EXCEEDED = 86,
	EQUIP_ERR_PURCHASE_LEVEL_TOO_LOW = 87,
	EQUIP_ERR_CANT_EQUIP_NEED_TALENT = 88,
	EQUIP_ERR_ITEM_MAX_LIMIT_CATEGORY_EQUIPPED_EXCEEDED = 89
};


class Bag;
class Player;
class Item : public Entity
{
public:
	Item(const std::string& guid = "");
	~Item() = default;

	uint32 GetEntry() { return data_.getValueInt32(ItemKeys::item_id); }
	uint32 GetCount() { return data_.getValueInt32(ItemKeys::item_count); }

	Bag* ToBag() { if (IsBag()) return reinterpret_cast<Bag*>(this); else return nullptr; }
	Bag const* ToBag() const { if (IsBag()) return reinterpret_cast<Bag const*>(this); else return nullptr; }
	bool IsBag() const { return inventoryType_ == INVTYPE_BAG; }
private:
    std::string m_text;
    uint8 m_slot;
    Bag* m_container;
    ItemUpdateState uState;
    int16 uQueuePos;
    bool mb_in_trade;                                   // true if item is currently in trade-window
    time_t m_lastPlayedTimeUpdate;
    uint32 m_paidMoney;
    uint32 m_paidExtendedCost;

	int32 inventoryType_;
	int32 count_;
	int32 entry_;
};

}

